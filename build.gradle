plugins {
    id 'java'
}

group 'org.example'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

sourceSets {
    jmh {
        java.srcDirs = ['src/jmh/java']
        resources.srcDirs = ['src/jmh/resources']
        compileClasspath += sourceSets.test.runtimeClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath

    }
}

task jmh(type: JavaExec, dependsOn: jmhClasses) {
    main = 'org.openjdk.jmh.Main'
    classpath = sourceSets.jmh.compileClasspath + sourceSets.jmh.runtimeClasspath

    def include = project.properties.get('include', '')
    def exclude = project.properties.get('exclude')
    def format = project.properties.get('format', 'json')
    def profilers = project.properties.get('profilers')
    def jvmArgs = project.properties.get('jvmArgs')
    def verify =  project.properties.get('verify')

    def resultFile = file("build/reports/jmh/result.${format}")

    args include
    if(exclude) {
        args '-e', exclude
    }
    if(verify != null) { // execute benchmarks with the minimum amount of execution (only to check if they are working)
        println "≥≥ Running in verify mode"
        args '-f' , 1
        args '-wi' , 1
        args '-i' , 1
    }
    args '-foe', 'true'   //fail-on-error
    args '-v', 'NORMAL'   //verbosity [SILENT, NORMAL, EXTRA]
    if(profilers) {
        profilers.split(',').each {
            args '-prof', it
        }
    }
    args '-jvmArgsPrepend', '-Xmx3072m'
    args '-jvmArgsPrepend', '-Xms3072m'
    if(jvmArgs) {
        for(jvmArg in jvmArgs.split(' ')) {
            args '-jvmArgsPrepend', jvmArg
        }
    }
    args '-rf', format
    args '-rff', resultFile

    doFirst {
        println "\nExecuting JMH with: $args \n"
        resultFile.parentFile.mkdirs()
    }
}

classes.finalizedBy(jmhClasses)

dependencies {
    implementation "com.lmax:disruptor:${project.'disruptor.version'}"
    implementation "org.slf4j:slf4j-api:${project.'slf4j.version'}"
    //implementation "org.slf4j:slf4j-log4j12:${project.'slf4j.version'}"
    implementation "org.apache.logging.log4j:log4j-core:$verLog4j"
    implementation "org.apache.logging.log4j:log4j-api:$verLog4j"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:$verLog4j"
    implementation "org.springframework:spring-context:${project.'spring.version'}"
    implementation 'org.openjdk.jmh:jmh-core:1.21'
    annotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.21'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation "org.mockito:mockito-core:${project.'org.mockito.mockito-core.version'}"

}